diff --git a/saci_orchestrator/orchestrator.py b/saci_orchestrator/orchestrator.py
index abc1234..def5678 100644
--- a/saci_orchestrator/orchestrator.py
+++ b/saci_orchestrator/orchestrator.py
@@ def generate_code(self) -> None:
-        filename = "main.py"
-        content = f"# Generated by SACI\n# Goal: {self.current_goal}\n\nprint('Hello from SACI!')\n"
-
-        try:
-            file = repo.get_contents(filename)
-            repo.update_file(filename, "SACI code update", content, file.sha)
-            print("[SACI] main.py обновлён в GitHub.")
-        except:
-            try:
-                repo.create_file(filename, "SACI code create", content)
-                print("[SACI] main.py создан в GitHub.")
-            except Exception as e:
-                print(f"[SACI] Ошибка создания main.py: {e}")
+        goal = self.current_goal.lower()
+        if any(word in goal for word in ["бот", "telegram", "чат"]):
+            filename = "telegram_bot.py"
+            content = (
+                "# Telegram Bot generated by SACI\n"
+                "# Цель: " + self.current_goal + "\n\n"
+                "from telegram.ext import Application, CommandHandler\n\n"
+                "async def start(update, context):\n"
+                "    await update.message.reply_text('Привет от SACI-бота!')\n\n"
+                "app = Application.builder().token('YOUR_TOKEN').build()\n"
+                "app.add_handler(CommandHandler('start', start))\n"
+                "app.run_polling()\n"
+            )
+        elif any(word in goal for word in ["парсер", "распарсить", "html", "сайт"]):
+            filename = "parser.py"
+            content = (
+                "# HTML Parser generated by SACI\n"
+                "# Цель: " + self.current_goal + "\n\n"
+                "import requests\n"
+                "from bs4 import BeautifulSoup\n\n"
+                "url = 'https://example.com'\n"
+                "response = requests.get(url)\n"
+                "soup = BeautifulSoup(response.text, 'html.parser')\n"
+                "print(soup.title.text)\n"
+            )
+        elif any(word in goal for word in ["api", "сервер", "endpoint", "фреймворк"]):
+            filename = "api_server.py"
+            content = (
+                "# Flask API generated by SACI\n"
+                "# Цель: " + self.current_goal + "\n\n"
+                "from flask import Flask, jsonify\n\n"
+                "app = Flask(__name__)\n\n"
+                "@app.route('/')\n"
+                "def index():\n"
+                "    return jsonify({'message': 'Привет от SACI API'})\n\n"
+                "if __name__ == '__main__':\n"
+                "    app.run(debug=True)\n"
+            )
+        else:
+            filename = "main.py"
+            content = (
+                "# Generated by SACI\n"
+                "# Goal: " + self.current_goal + "\n\n"
+                "print('Hello from SACI!')\n"
+            )
+
+        try:
+            file = repo.get_contents(filename)
+            repo.update_file(filename, f"SACI code update for goal: {self.current_goal}", content, file.sha)
+            print(f"[SACI] {filename} обновлён в GitHub. Причина: {self.current_goal}")
+        except:
+            try:
+                repo.create_file(filename, f"SACI code create for goal: {self.current_goal}", content)
+                print(f"[SACI] {filename} создан в GitHub. Причина: {self.current_goal}")
+            except Exception as e:
+                print(f"[SACI] Ошибка создания {filename}: {e}")
