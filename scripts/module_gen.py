import os
import argparse
from developer import (
    generate_python_stub,
    generate_py_test,
    generate_markdown_doc,
    generate_json_config,
    generate_yaml_config,
    ensure_path,
    write_file
)

def auto_init_py(directory):
    parts = directory.split("/")
    for i in range(1, len(parts)+1):
        path = os.path.join(*parts[:i])
        init_path = os.path.join(path, "__init__.py")
        if not os.path.exists(init_path):
            with open(init_path, "w") as f:
                f.write("# auto-generated by SACI\n")

def register_module(path):
    registry = "modules/module_registry.py"
    os.makedirs("modules", exist_ok=True)
    if not os.path.exists(registry):
        with open(registry, "w") as f:
            f.write("# SACI Module Registry\nregistered_modules = []\n")

    with open(registry, "a") as f:
        f.write(f'registered_modules.append("{path}")\n')
    print(f"üßæ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ module_registry.py: {path}")

def generate_module(path, mtype):
    ext = os.path.splitext(path)[-1]
    if mtype == "py":
        generate_python_stub(path)
    elif mtype == "test":
        generate_py_test(path)
    elif mtype == "md":
        generate_markdown_doc(path, path)
    elif mtype == "json":
        generate_json_config(path)
    elif mtype in ["yml", "yaml"]:
        generate_yaml_config(path)
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.")
        return

    # ‚õì auto init + registry
    if "/" in path:
        auto_init_py("/".join(path.split("/")[:-1]))
    register_module(path)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="üß† SACI Module Generator CLI")
    parser.add_argument("--name", required=True, help="–ò–º—è –º–æ–¥—É–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: core/saci_memory.py)")
    parser.add_argument("--type", required=True, choices=["py", "test", "md", "json", "yml", "yaml"], help="–¢–∏–ø —Ñ–∞–π–ª–∞")
    args = parser.parse_args()

    generate_module(args.name, args.type)
