import os
from developer import (
    generate_python_stub,
    generate_py_test,
    generate_markdown_doc,
    generate_json_config,
    generate_yaml_config,
    ensure_path,
    write_file
)

def auto_init_py(directory):
    parts = directory.split("/")
    for i in range(1, len(parts)+1):
        path = os.path.join(*parts[:i])
        init_path = os.path.join(path, "__init__.py")
        if not os.path.exists(init_path):
            with open(init_path, "w") as f:
                f.write("# auto-generated by SACI\n")

def register_module(path):
    registry = "modules/module_registry.py"
    os.makedirs("modules", exist_ok=True)
    if not os.path.exists(registry):
        with open(registry, "w") as f:
            f.write("# SACI Module Registry\nregistered_modules = []\n")

    with open(registry, "a") as f:
        f.write(f'registered_modules.append("{path}")\n')
    print(f"üßæ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ module_registry.py: {path}")

def generate_module(path, mtype):
    if mtype == "py":
        generate_python_stub(path)
    elif mtype == "test":
        generate_py_test(path)
    elif mtype == "md":
        generate_markdown_doc(path, path)
    elif mtype == "json":
        generate_json_config(path)
    elif mtype in ["yml", "yaml"]:
        generate_yaml_config(path)
    else:
        print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.")
        return

    if "/" in path:
        auto_init_py("/".join(path.split("/")[:-1]))
    register_module(path)

def interactive():
    print("\nüéõ SACI Module Generator [Interactive Mode]\n")
    path = input("üìÑ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: core/saci_memory.py): ").strip()

    print("\nüß© –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥—É–ª—è:")
    print("1. Python class [.py]")
    print("2. Unit test [.py]")
    print("3. Markdown [.md]")
    print("4. JSON config [.json]")
    print("5. YAML config [.yml]")

    choice = input("\nüëâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()

    type_map = {
        "1": "py",
        "2": "test",
        "3": "md",
        "4": "json",
        "5": "yml"
    }

    mtype = type_map.get(choice)
    if not mtype:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return

    generate_module(path, mtype)

if __name__ == "__main__":
    interactive()
