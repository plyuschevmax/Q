import os
import subprocess
import json
from datetime import datetime
from dotenv import load_dotenv
import openai

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –∏ API-–∫–ª—é—á–∞
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")


def generate_patch():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ git
    status = subprocess.run(["git", "status", "--porcelain"], stdout=subprocess.PIPE)
    if not status.stdout.strip():
        print("‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–∞—Ç—á–∞.")
        return None

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ç—á–∞
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    patch_dir = "patches"
    os.makedirs(patch_dir, exist_ok=True)
    patch_path = os.path.join(patch_dir, f"auto_patch_{timestamp}.patch")

    with open(patch_path, "w") as f:
        subprocess.run(["git", "diff"], stdout=f)

    print(f"üì¶ –ü–∞—Ç—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {patch_path}")
    analyze_patch_with_gpt(patch_path, timestamp)
    return patch_path


def analyze_patch_with_gpt(patch_path, timestamp):
    with open(patch_path, "r", encoding="utf-8") as f:
        diff = f.read()

    prompt = f"""
–¢—ã ‚Äî AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ SACI. –ù–∞ –æ—Å–Ω–æ–≤–µ git diff –æ–ø—Ä–µ–¥–µ–ª–∏:
- "type": feature, bugfix, refactor, doc, config, test
- "risk_score": –æ—Ç 0.0 –¥–æ 1.0
- "conflict_probability": –æ—Ç 0.0 –¥–æ 1.0
- "summary": –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—É—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π

–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –≤ JSON. –í–æ—Ç diff:
```diff
    {diff}
"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ SACI."},
                {"role": "user", "content": prompt},
            ],
            temperature=0.2,
            max_tokens=500,
        )

        reply = response["choices"][0]["message"]["content"]
        prediction = json.loads(reply)
        prediction["timestamp"] = timestamp

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        os.makedirs("logs", exist_ok=True)
        with open("logs/commit_meta.json", "w", encoding="utf-8") as f:
            json.dump(prediction, f, indent=4)

        print("üß† GPT-–∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤.")
        update_saci_log(prediction)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ GPT-–∞–Ω–∞–ª–∏–∑–∞: {e}")


def update_saci_log(prediction):
    entry = f"""
### üß† SACI-Agent
üïí {prediction['timestamp']}
üéØ {prediction['summary']}
üß† –¢–∏–ø: {prediction['type']}
‚ö†Ô∏è –†–∏—Å–∫: {prediction['risk_score']}
üîÅ –ö–æ–Ω—Ñ–ª–∏–∫—Ç: {prediction['conflict_probability']}
‚Äî
"""
    log_file = "SACI_LOG_TEMPLATE.md"
    if not os.path.exists(log_file):
        with open(log_file, "w", encoding="utf-8") as f:
            f.write("# SACI Commit Log üìò\n\n")

    with open(log_file, "a", encoding="utf-8") as f:
        f.write(entry)

    print("üìå SACI_LOG_TEMPLATE.md –æ–±–Ω–æ–≤–ª—ë–Ω.")
