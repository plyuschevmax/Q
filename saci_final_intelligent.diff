diff --git a/saci_orchestrator/orchestrator.py b/saci_orchestrator/orchestrator.py
index 1234567..89abcde 100644
--- a/saci_orchestrator/orchestrator.py
+++ b/saci_orchestrator/orchestrator.py
@@ class SACIOrchestrator:
     def generate_code(self) -> None:
         """
         Генерирует код в зависимости от цели и отправляет файл в GitHub.
         """
         import os
         try:
             from github import Github
         except ImportError:
             print("[SACI] Установи PyGithub: pip install PyGithub")
             return

         token = os.getenv("GITHUB_TOKEN")
         username = os.getenv("GITHUB_USERNAME")
         repo_name = os.getenv("GITHUB_REPO")

         if not token or not username or not repo_name:
             print("[SACI] GitHub переменные окружения не заданы.")
             return

         goal = self.current_goal.lower()
         if any(word in goal for word in ["бот", "telegram", "чат"]):
             filename = "telegram_bot.py"
             content = (
                 "# Telegram Bot generated by SACI\n"
                 "# Цель: " + self.current_goal + "\n\n"
                 "from telegram.ext import Application, CommandHandler\n\n"
                 "async def start(update, context):\n"
                 "    await update.message.reply_text('Привет от SACI-бота!')\n\n"
                 "app = Application.builder().token('YOUR_TOKEN').build()\n"
                 "app.add_handler(CommandHandler('start', start))\n"
                 "app.run_polling()\n"
             )
         elif any(word in goal for word in ["парсер", "распарсить", "html", "сайт"]):
             filename = "parser.py"
             content = (
                 "# HTML Parser generated by SACI\n"
                 "# Цель: " + self.current_goal + "\n\n"
                 "import requests\n"
                 "from bs4 import BeautifulSoup\n\n"
                 "url = 'https://example.com'\n"
                 "response = requests.get(url)\n"
                 "soup = BeautifulSoup(response.text, 'html.parser')\n"
                 "print(soup.title.text)\n"
             )
         elif any(word in goal for word in ["api", "сервер", "endpoint", "фреймворк"]):
             filename = "api_server.py"
             content = (
                 "# Flask API generated by SACI\n"
                 "# Цель: " + self.current_goal + "\n\n"
                 "from flask import Flask, jsonify\n\n"
                 "app = Flask(__name__)\n\n"
                 "@app.route('/')\n"
                 "def index():\n"
                 "    return jsonify({'message': 'Привет от SACI API'})\n\n"
                 "if __name__ == '__main__':\n"
                 "    app.run(debug=True)\n"
             )
         else:
             filename = "main.py"
             content = (
                 "# Generated by SACI\n"
                 "# Goal: " + self.current_goal + "\n\n"
                 "print('Hello from SACI!')\n"
             )

         try:
             g = Github(token)
             user = g.get_user()
             repo = user.get_repo(repo_name)
             try:
                 file = repo.get_contents(filename)
                 repo.update_file(filename, f"SACI code update for goal: {self.current_goal}", content, file.sha)
                 print(f"[SACI] {filename} обновлён в GitHub. Причина: {self.current_goal}")
             except:
                 repo.create_file(filename, f"SACI code create for goal: {self.current_goal}", content)
                 print(f"[SACI] {filename} создан в GitHub. Причина: {self.current_goal}")
         except Exception as e:
             print(f"[SACI] Ошибка при пуше кода в GitHub: {e}")
