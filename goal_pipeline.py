import os
import json
import subprocess
from agents.architect import analyze_repo_and_suggest_goal

GOAL_STATE = "saci_goal_state.json"

def archive_completed_goal():
    if not os.path.exists(GOAL_STATE):
        return
    with open(GOAL_STATE) as f:
        goal_data = json.load(f)
    if goal_data.get("status") == "complete":
        print("üì¶ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é —Ü–µ–ª—å.")
        subprocess.run(["python", "agents/project_manager.py"])
        os.remove(GOAL_STATE)

def process_scan():
    try:
        archive_completed_goal()

        # 1. –°–∫–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞
        subprocess.run(["python", "saci_remote_agent.py"])
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—Ä–∞–Ω–∞.")

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–ª–∏
        goal = analyze_repo_and_suggest_goal()
        goal_data = {
            "goal": goal,
            "status": "in_progress",
            "timestamp": subprocess.getoutput("date '+%Y-%m-%d %H:%M'"),
            "dev_done": False,
            "test_done": False
        }
        with open(GOAL_STATE, "w") as f:
            json.dump(goal_data, f, indent=4, ensure_ascii=False)
        print(f"üéØ –¶–µ–ª—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞: {goal}")

        # 3. –ó–∞–ø—É—Å–∫ goal_runner.py –≤ —Ñ–æ–Ω–µ
        subprocess.Popen("python agents/goal_runner.py", shell=True)
        return f"‚úÖ –¶–∏–∫–ª –∑–∞–ø—É—â–µ–Ω.\nüéØ –¶–µ–ª—å: {goal}"

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –≤ process_scan: {e}"

def process_accept():
    if not goal_exists(): return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏."
    update_goal_status("in_progress")
    return "‚úÖ –¶–µ–ª—å –ø—Ä–∏–Ω—è—Ç–∞. –ü–µ—Ä–µ–¥–∞—ë–º –∞–≥–µ–Ω—Ç—É –Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ..."

def process_reject():
    if not goal_exists(): return "–ù–µ—Ç —Ü–µ–ª–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è."
    update_goal_status("rejected")
    return "üö´ –¶–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."

def get_status():
    if not goal_exists(): return "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏."
    with open(GOAL_STATE) as f:
        data = json.load(f)
    return f"üìå –°—Ç–∞—Ç—É—Å —Ü–µ–ª–∏: {data['status']}\nüéØ –¶–µ–ª—å: {data['goal']}"

def goal_exists():
    return os.path.exists(GOAL_STATE)

def update_goal_status(new_status):
    with open(GOAL_STATE) as f:
        data = json.load(f)
    data["status"] = new_status
    with open(GOAL_STATE, "w") as f:
        json.dump(data, f, indent=4)

if __name__ == "__main__":
    print(process_scan())
