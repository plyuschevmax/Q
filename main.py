# ‚úÖ main.py (–æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import re
import subprocess
import logging
import time
import requests
from pathlib import Path
from dotenv import load_dotenv
import openai

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

from core.saci_protocol import SACIProtocol
from agents.strategist import Strategist
from agents.architect import Architect
from agents.project_manager import ProjectManager
from agents.developer import Developer
from agents.tester import Tester
from agents.deployer import Deployer
from agents.metrics_master import MetricsMaster

# === SETUP ===
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GITHUB_REPO_PATH = os.getenv("GITHUB_REPO_PATH", ".")

# === –õ–û–ì–ò ===
logging.basicConfig(filename="agent.log", level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
user_states = {}

# === –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ===
FORBIDDEN_KEYWORDS = ["os.remove", "shutil.rmtree", "eval", "exec", "subprocess", "open("]

def is_description_safe(description: str) -> bool:
    return not any(keyword in description.lower() for keyword in FORBIDDEN_KEYWORDS)

def bootstrap_workspace():
    for folder in ["modules", "core", "tests", "logs", "__pycache__"]:
        Path(folder).mkdir(parents=True, exist_ok=True)
    Path(".gitignore").write_text(".env\n__pycache__/\nlogs/\nagent.log\n", encoding="utf-8")
    Path("README.md").write_text("# ChatGPT-Agent\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π Telegram-–±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Python-–º–æ–¥—É–ª–µ–π –∏ –¥–µ–ø–ª–æ—è.\n", encoding="utf-8")

def strip_markdown(content: str) -> str:
    match = re.search(r"```python(.*?)```", content, re.DOTALL)
    return match.group(1).strip() if match else content.strip()

def inject_project_root_path(code: str) -> str:
    if "sys.path.append" in code:
        return code
    return (
        "import sys, os\n"
        "sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\n" + code
    )

async def process_new_module(description: str) -> str:
    if not is_description_safe(description):
        return "üö´ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–¥."

    prompt = f"""
    –¢—ã ‚Äî AI-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π Python-–º–æ–¥—É–ª—å —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ –∫–æ–¥–∞.
    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:
    - –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    - —Å—Ç—Ä–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è
    - –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥ –±–µ–∑ Markdown

    –û–ø–∏—Å–∞–Ω–∏–µ: {description}
    """
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.2,
        )
        raw = response['choices'][0]['message']['content']
        code = inject_project_root_path(strip_markdown(raw))
        filename = Path("modules/gen_module.py")
        filename.write_text(code, encoding="utf-8")

        try:
            subprocess.run(["git", "-C", GITHUB_REPO_PATH, "add", str(filename)], check=True)
            subprocess.run(["git", "-C", GITHUB_REPO_PATH, "commit", "-m", f"Add module: {description}"], check=True)
            subprocess.run(["git", "-C", GITHUB_REPO_PATH, "push"], check=True)
            git_result = "‚úÖ –ö–æ–¥ –∑–∞–ø—É—à–µ–Ω."
        except subprocess.CalledProcessError as e:
            logging.exception("Git push error")
            git_result = f"‚ö†Ô∏è Git –æ—à–∏–±–∫–∞: {e}"

        try:
            result = subprocess.run(["python", str(filename)], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                return f"‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n{git_result}\nüìÑ {result.stdout}"
            return f"‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:\n{git_result}\n‚ùå {result.stderr}"
        except subprocess.TimeoutExpired:
            return "‚è±Ô∏è –ö–æ–¥ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏."

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

# === TELEGRAM ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø SACI-–±—É–¥–¥–∞. –ù–∞–ø–∏—à–∏ /new_module —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

async def new_module(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = "AWAITING_MODULE_DESCRIPTION"
    await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è:")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if user_states.get(user_id) == "AWAITING_MODULE_DESCRIPTION":
        await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–¥...")
        result = await process_new_module(text)
        await update.message.reply_text(result)
        user_states[user_id] = None
    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /new_module, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

def main():
    bootstrap_workspace()
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("new_module", new_module))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

# === Sprint Execution ===
def run_sprint(goal: str, minutes: int):
    start_time = time.time()
    end_time = start_time + minutes * 60
    logging.info(f"üéØ –ó–∞–ø—É—Å–∫ —Å–ø—Ä–∏–Ω—Ç–∞: {goal} –Ω–∞ {minutes} –º–∏–Ω")

    agents = [
        Strategist(), Architect(), ProjectManager(),
        Developer(), Tester(), Deployer(), MetricsMaster()
    ]
    iteration = 1
    data = {"goal": goal}

    while time.time() < end_time:
        logging.info(f"--- –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration} ---")
        for agent in agents:
            data = agent.execute(data)
            logging.info(f"{agent.__class__.__name__} –∑–∞–≤–µ—Ä—à–∏–ª –∏—Ç–µ—Ä–∞—Ü–∏—é.")
            try:
                requests.post(
                    f'https://api.telegram.org/bot{os.getenv("TELEGRAM_TOKEN")}/sendMessage',
                    data={
                        'chat_id': os.getenv('TELEGRAM_CHAT_ID'),
                        'text': f'{agent.__class__.__name__} –∑–∞–≤–µ—Ä—à–∏–ª –∏—Ç–µ—Ä–∞—Ü–∏—é {iteration}.'
                    }
                )
            except Exception as e:
                logging.error(f"Telegram –æ—à–∏–±–∫–∞: {e}")
        iteration += 1

    logging.info("‚úÖ –°–ø—Ä–∏–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
    try:
        requests.post(
            f'https://api.telegram.org/bot{os.getenv("TELEGRAM_TOKEN")}/sendMessage',
            data={
                'chat_id': os.getenv('TELEGRAM_CHAT_ID'),
                'text': '–°–ø—Ä–∏–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.'
            }
        )
    except Exception as e:
        logging.error(f"Telegram –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
