from typing import List
from dotenv import load_dotenv
load_dotenv()


class SACIOrchestrator:
    def __init__(self):
        self.current_goal = None
        self.tasks = []

    def set_goal(self, goal: str) -> None:
        self.current_goal = goal
        print(f"[SACI Orchestrator] Goal set to: {self.current_goal}")

    def plan_tasks(self) -> List[str]:
        if not self.current_goal:
            print("[SACI Orchestrator] No goal set. Unable to plan tasks.")
            return []

        self.tasks = [
            "Analyze goal and create code skeleton",
            "Generate code via AI agent",
            "Run tests against generated code",
            "Integrate code to GitHub if tests pass",
            "Deploy to environment if integration is successful"
        ]

        print(f"[SACI Orchestrator] Planned tasks for goal '{self.current_goal}':")
        for i, task in enumerate(self.tasks, start=1):
            print(f"  {i}. {task}")
        return self.tasks

    def execute_tasks(self) -> None:
        if not self.tasks:
            print("[SACI Orchestrator] No tasks to execute.")
            return

        print("[SACI Orchestrator] Executing tasks...")
        for i, task in enumerate(self.tasks, start=1):
            print(f"  {i}. {task} [Executed]")

        self.generate_code()
        self.tasks = []

    def generate_code(self) -> None:
        """
        Генерирует код в зависимости от цели и отправляет файл в GitHub.
        """
        import os
        try:
            from github import Github
        except ImportError:
            print("[SACI] Установи PyGithub: pip install PyGithub")
            return

        token = os.getenv("GITHUB_TOKEN")
        username = os.getenv("GITHUB_USERNAME")
        repo_name = os.getenv("GITHUB_REPO")

        if not token or not username or not repo_name:
            print("[SACI] GitHub переменные окружения не заданы.")
            return

        goal = self.current_goal.lower()
        if any(word in goal for word in ["бот", "telegram", "чат"]):
            filename = "telegram_bot.py"
            content = (
                "# Telegram Bot generated by SACI\n"
                "# Цель: " + self.current_goal + "\n\n"
                "from telegram.ext import Application, CommandHandler\n\n"
                "async def start(update, context):\n"
                "    await update.message.reply_text('Привет от SACI-бота!')\n\n"
                "app = Application.builder().token('YOUR_TOKEN').build()\n"
                "app.add_handler(CommandHandler('start', start))\n"
                "app.run_polling()\n"
            )
        elif any(word in goal for word in ["парсер", "распарсить", "html", "сайт"]):
            filename = "parser.py"
            content = (
                "# HTML Parser generated by SACI\n"
                "# Цель: " + self.current_goal + "\n\n"
                "import requests\n"
                "from bs4 import BeautifulSoup\n\n"
                "url = 'https://example.com'\n"
                "response = requests.get(url)\n"
                "soup = BeautifulSoup(response.text, 'html.parser')\n"
                "print(soup.title.text)\n"
            )
        elif any(word in goal for word in ["api", "сервер", "endpoint", "фреймворк"]):
            filename = "api_server.py"
            content = (
                "# Flask API generated by SACI\n"
                "# Цель: " + self.current_goal + "\n\n"
                "from flask import Flask, jsonify\n\n"
                "app = Flask(__name__)\n\n"
                "@app.route('/')\n"
                "def index():\n"
                "    return jsonify({'message': 'Привет от SACI API'})\n\n"
                "if __name__ == '__main__':\n"
                "    app.run(debug=True)\n"
            )
        else:
            filename = "main.py"
            content = (
                "# Generated by SACI\n"
                "# Goal: " + self.current_goal + "\n\n"
                "print('Hello from SACI!')\n"
            )

        try:
            from github import Github
            g = Github(token)
            user = g.get_user()
            repo = user.get_repo(repo_name)
            try:
                file = repo.get_contents(filename)
                repo.update_file(filename, f"SACI code update for goal: {self.current_goal}", content, file.sha)
                print(f"[SACI] {filename} обновлён в GitHub. Причина: {self.current_goal}")
            except:
                repo.create_file(filename, f"SACI code create for goal: {self.current_goal}", content)
                print(f"[SACI] {filename} создан в GitHub. Причина: {self.current_goal}")
        except Exception as e:
            print(f"[SACI] Ошибка при пуше кода в GitHub: {e}")

import requests
import base64

class GitHubAgent:
    def __init__(self, token, repo, username):
        self.token = token
        self.repo = repo
        self.username = username
        self.api_url = f"https://api.github.com/repos/{username}/{repo}/contents"

    def update_file(self, path, content, commit_message):
        url = f"{self.api_url}/{path}"
        headers = {
            "Authorization": f"Bearer {self.token}",
            "Accept": "application/vnd.github+json"
        }

        # Получаем SHA текущей версии файла (если он уже существует)
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            sha = response.json()["sha"]
        else:
            sha = None

        data = {
            "message": commit_message,
            "content": base64.b64encode(content.encode()).decode(),
            "branch": "main"
        }
        if sha:
            data["sha"] = sha

        response = requests.put(url, headers=headers, json=data)
        if response.status_code in [200, 201]:
            print("✅ Файл успешно запушен в GitHub")
        else:
            print(f"❌ Ошибка push: {response.status_code} → {response.json()}")
